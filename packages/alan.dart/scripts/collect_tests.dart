import 'dart:async';
import 'dart:io';

import 'package:args/args.dart';
import 'package:glob/glob.dart';
import 'package:path/path.dart' as path;

final _sep = path.separator;

Future main(List<String> arguments) async {
  final packageRoot = Directory.current;

  final parser = ArgParser();
  parser.addFlag('help', abbr: 'h', help: 'Show usage', negatable: false);
  parser.addOption(
    'exclude',
    help:
        'Exclude specific files or directories using glob pattern (relative to package root), '
        'e.g. "subdir/*", "**_vm_test.dart".',
  );

  final options = parser.parse(arguments);

  if (options.wasParsed('help')) {
    print(parser.usage);
    return;
  }

  Glob? excludeGlob;
  if (options['exclude'] is String) {
    excludeGlob = Glob(options['exclude'] as String);
  }

  final testFiles = findTestFiles(packageRoot, excludeGlob: excludeGlob);
  print('Found ${testFiles.length} test files.');
  generateMainScript(packageRoot, testFiles);
  print('Generated test-all script in test/.test_coverage.dart. '
      'Please make sure it is added to .gitignore.');
}

List<File> findTestFiles(Directory packageRoot, {Glob? excludeGlob}) {
  final testsPath = path.join(packageRoot.absolute.path, 'test');
  final testsRoot = Directory(testsPath);
  final contents = testsRoot.listSync(recursive: true);
  final result = <File>[];
  for (final item in contents) {
    if (item is! File) continue;
    if (!item.path.endsWith('_test.dart')) continue;
    final relativePath = item.path.substring(packageRoot.path.length + 1);
    if (excludeGlob != null && excludeGlob.matches(relativePath)) {
      continue;
    }
    result.add(item);
  }
  return result;
}

class TestFileInfo {
  final File testFile;
  final String alias;
  final String import;

  TestFileInfo._(this.testFile, this.alias, this.import);

  factory TestFileInfo.forFile(File testFile) {
    final parts = testFile.absolute.path.split(_sep).toList();
    var relative = <String>[];
    while (parts.last != 'test') {
      relative.add(parts.last);
      parts.removeLast();
    }
    relative = relative.reversed.toList();
    final alias = relative.join('_').replaceFirst('.dart', '');
    final importPath = relative.join('/');
    final import = "import '$importPath' as $alias;";
    return TestFileInfo._(testFile, alias, import);
  }
}

void generateMainScript(Directory packageRoot, List<File> testFiles) {
  final imports = <String>[];
  final mainBody = <String>[];

  for (final test in testFiles) {
    final info = TestFileInfo.forFile(test);
    imports.add(info.import);
    mainBody.add('  ${info.alias}.main();');
  }
  imports.sort();

  final buffer = StringBuffer()
    ..writeln('// Auto-generated by test_coverage. Do not edit by hand.')
    ..writeln('// Consider adding this file to your .gitignore.')
    ..writeln();
  imports.forEach(buffer.writeln);
  buffer..writeln()..writeln('void main() {');
  mainBody.forEach(buffer.writeln);
  buffer.writeln('}');
  File(
    path.join(packageRoot.path, 'test', '.test_coverage.dart'),
  ).writeAsStringSync(buffer.toString());
}
